---
description:
globs:
alwaysApply: false
---
# Electron 开发模式

## 主进程 (Main Process) 规范

### 安全配置
- 启用 Context Isolation
- 禁用 Node Integration
- 使用 Preload 脚本安全地暴露 API
- 验证所有用户输入
- 安全地处理文件操作

### 文件结构
- 所有主进程代码放在 `src/main/` 目录
- 使用 IPC 进行进程间通信
- 在 `src/shared/` 中定义共享的类型和常量

## IPC 通信模式

### 命名约定
- 使用清晰的 IPC 通道名称
- 格式: `模块:操作` (例如: `editor:save`, `file:open`)
- 使用 TypeScript 接口定义 IPC 消息结构

### 示例模式

```typescript
// 在 shared/types.ts 中定义
interface IPCMessage {
  type: string;
  payload: unknown;
}

// 在主进程中
ipcMain.handle('editor:save', async (event, content: string) => {
  // 保存逻辑
});

// 在渲染进程中
const saveContent = async (content: string) => {
  await window.electronAPI.invoke('editor:save', content);
};
```

## 性能优化

### Electron 性能
- 最小化主进程和渲染进程间的通信
- 使用 Web Workers 处理 CPU 密集型任务
- 优化应用启动时间
- 实现增量更新机制

### 内存管理
- 及时清理事件监听器
- 避免内存泄漏
- 合理使用缓存机制
